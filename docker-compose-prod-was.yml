volumes:
  caddy_data:
  caddy_config:
  caddy_logs:

services:
  # Spring Boot Backend
  backend:
    build:
      context: BE
      dockerfile: Dockerfile
    container_name: certis-backend
    networks:
      - app-network
    env_file:
      - ./BE/.env.prod
    init: true
    expose:
      - 8080
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Caddy Reverse Proxy
  caddy:
    image: caddy:2-alpine
    container_name: certis-caddy
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddy/Caddyfile:/etc/caddy/Caddyfile
      - caddy_logs:/logs  # /logs로 마운트
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    mem_limit: 100m
    mem_reservation: 50m
    cpus: 0.3
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    environment:
      - DOMAIN=${DOMAIN}

  # Fail2Ban
  fail2ban:
    image: crazymax/fail2ban:latest
    container_name: certis-fail2ban
    network_mode: "host"
    cap_add:
      - NET_ADMIN
      - NET_RAW
    volumes:
      - ./fail2ban:/data
      - caddy_logs:/logs:ro  # /logs로 변경 (var/log/caddy가 아닌)
      - /var/log:/var/log:ro
    environment:
      - TZ=Asia/Seoul
      - F2B_LOG_LEVEL=INFO
      - F2B_DB_PURGE_AGE=1d
    restart: unless-stopped
    depends_on:
      - caddy
    mem_limit: 50m
    mem_reservation: 25m
    cpus: 0.1

networks:
  app-network:
    driver: bridge
    internal: false