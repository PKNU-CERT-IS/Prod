volumes:
  caddy_data:
  caddy_config:
  postgresql-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/data/postgresql
  redis-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /var/data/redis

services:
  # Spring Boot Backend
  backend:
    build:
      context: BE
      dockerfile: Dockerfile
    container_name: certis-backend
    networks:
      - cert-is-internal  # 내부 네트워크만 사용
    env_file:
      - ./BE/.env.prod
    environment:
      # PostgreSQL 연결 설정 (내부 서비스명 사용)
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgresql:5432/${POSTGRES_DB}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379
      # 프로파일 및 기타 설정
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - EMBEDDED_POSTGRES_ENABLED=false
      - EMBEDDED_REDIS_ENABLED=false
      - CACHE_TYPE=${CACHE_TYPE}
      # CORS 설정 (Vercel + CloudFlare 도메인)
      - CORS_ALLOWED_ORIGINS=${CORS_ALLOWED_ORIGINS}
      # JVM 최적화
      - JAVA_OPTS=${JAVA_OPTS}
      # 서버 설정
      - SERVER_PORT=8080
    init: true
    expose:
      - 8080
    # 외부 포트는 제거 (Caddy를 통해서만 접근)
    depends_on:
      postgresql:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # PostgreSQL Database (내부 네트워크만)
  postgresql:
    image: postgres:15.14-alpine
    container_name: certis-postgresql
    volumes:
      - postgresql-data:/var/lib/postgresql/data
      - ./db/migration:/docker-entrypoint-initdb.d
    networks:
      - cert-is-internal
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=${POSTGRES_INITDB_ARGS}
    # 외부 포트 노출 제거 (보안상 내부에서만 접근)
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=${POSTGRES_MAX_CONNECTIONS}
      -c shared_buffers=${POSTGRES_SHARED_BUFFERS}
      -c effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE}
      -c maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM}
      -c checkpoint_completion_target=0.9
      -c wal_buffers=${POSTGRES_WAL_BUFFERS}
      -c default_statistics_target=100

  # Redis Service (내부 네트워크만)
  redis:
    image: redis:latest
    container_name: certis-redis
    volumes:
      - redis-data:/data
    networks:
      - cert-is-internal
    # 외부 포트 노출 제거 (보안상 내부에서만 접근)
    command: >
      redis-server
      --appendonly yes
      --maxmemory ${REDIS_MAX_MEMORY}
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Caddy Reverse Proxy (API Gateway) - 백엔드 API만 노출
  caddy:
    image: caddy:${CADDY_VERSION:-latest}
    container_name: certis-caddy
    volumes:
      - caddy_data:/data
      - caddy_config:/config
      - ./Caddy/Caddyfile:/etc/caddy/Caddyfile
    ports:
      - "80:80"    # HTTP (Let's Encrypt 인증서 발급용)
      - "443:443"  # HTTPS (실제 API 서비스)
    networks:
      - cert-is-internal
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "caddy", "version"]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      - DOMAIN=${DOMAIN}  # 실제 도메인 (예: api.yourdomain.com)

networks:
  cert-is-internal:
    driver: bridge
    internal: false  # 외부 인터넷 접근은 허용 (패키지 업데이트 등을 위해)